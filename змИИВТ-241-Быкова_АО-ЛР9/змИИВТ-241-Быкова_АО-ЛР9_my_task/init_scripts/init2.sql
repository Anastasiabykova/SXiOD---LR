CREATE TABLE IF NOT EXISTS Клиенты (
    ID_клиента SERIAL PRIMARY KEY,
    ФИО_клиента VARCHAR(255),
    Данные_паспорта VARCHAR(255),
    Email VARCHAR(255)
);

CREATE TABLE IF NOT EXISTS Поездки_клиента (
    ID_поездки_клиента SERIAL PRIMARY KEY,
    ID_клиента INT references Клиенты (ID_клиента),
    Дата_поездки DATE,
    Общая_стоимость DECIMAL
);

CREATE TABLE IF NOT EXISTS Тип_поездки (
    ID_типа_поездки SERIAL PRIMARY KEY,
    ID_поездки INT references Поездки_клиента (ID_поездки_клиента),
    Страна_пребывания VARCHAR(255),
    Количество_дней INT,
    Стоимость_одного_дня DECIMAL
);

INSERT INTO Клиенты VALUES (1, 'Макаров Даниил Александрович', '2020 456789', 'ilyamak23@gmail.com'),
(2, 'Парфенов Игорь Валерьевич', '2012 459889', 'igparf@gmail.com'),
(3, 'Иванченко Ольга Романовна', '1993 800977', 'ivolg67@icloud.com'),
(4, 'Сысоева Людмила Евгеньевна', '1999 700456', 'suslud@gmail.com'),
(5, 'Кудаева Алина Александровна', '2001 209888', 'alikud998@mail.ru'),
(6, 'Иванов Антон Васильевич', '2004 300987', 'antvas334@gmail.com'),
(7, 'Сидоров Олег Алексеевич', '1998 400876', 'sidoleg99@mail.ru'),
(8, 'Панин Николай Игоревич', '2014 100987', 'pannik345@gmail.com'),
(9, 'Троцюк Елена Валерьевна', '2015 778789', 'elkatr66@icloud.com'),
(10, 'Кузина Маргарита Александровна', '2022 200987', 'kuzmargo11@gmail.com'),
(11, 'Михина Маргарита Анатольевна', '2023 500234', 'margmix553@mail.ru'),
(12, 'Рогов Никита Викторович', '2012 177800', 'rogovnik998@gmail.com'),
(13, 'Милахина Кристина Викторовна', '2003 100934', 'milkris778@icloud.com'),
(14, 'Попова Мила Валерьевна', '1998 500923', 'popmil88@gmail.com'),
(15, 'Никулов Макар Федорович', '2006 509873', 'nikmak@gmail.com'),
(16, 'Комаров Макар Васильевич', '2009 100333', 'kommak998@mail.ru'),
(17, 'Милохина Милана Олеговна', '2006 300566', 'milanami77@gmail.com'),
(18, 'Фурсина Анна Александровна', '2019 300555', 'fursina9988@gmail.com'),
(19, 'Суботин Матвей Петрович', '2004 100333', 'subbmat5556@mail.ru'),
(20, 'Суботэ Клара Федоровна', '1990 300876', 'klarasubb8@icloud.com');

INSERT INTO Поездки_клиента VALUES (51, 1, '2022-12-31', 70000.0),
(52, 1, '2021-12-31', 100000.0),
(53, 2, '2024-10-06', 65000.0),
(54, 2, '2018-09-10', 30000.0),
(55, 2, '2019-11-01', 80000.45),
(56, 4, '2023-02-20', 45000.0),
(57, 5, '2016-12-23', 70000.5),
(58, 6, '2017-05-30', 60000.0),
(59, 8, '2022-10-01', 90000.6),
(61, 8, '2020-03-25', 90000.0),
(62, 10, '2015-05-12', 70000.67),
(63, 11, '2022-12-31', 20000.0),
(64, 12, '2020-12-31', 60000.0),
(65, 14, '2015-12-05', 70000.0),
(66, 16, '2021-03-30', 80000.3),
(67, 17, '2018-05-10', 70000.8),
(68, 17, '2022-12-01', 70000.9),
(69, 17, '2019-07-15', 90000.56),
(71, 17, '2022-12-30', 40000.0),
(72, 18, '2020-02-11', 70000.0),
(73, 18, '2018-10-05', 130000.0),
(74, 20, '2016-09-30', 150000.3),
(75, 20, '2015-04-10', 100000.0);

INSERT INTO Тип_поездки VALUES (1110, 51, 'Турция', 7, 10000),
(1111, 52, 'США', 5, 20000),
(1112, 53, 'Грузия', 13, 5000),
(1113, 54, 'ОАЭ', 3, 10000),
(1114, 56, 'Египет', 5, 9000),
(1115, 57, 'Таиланд', 7, 10000),
(1116, 58, 'Мексика', 6, 10000),
(1117, 59, 'Япония', 10, 9000),
(1118, 61, 'Китай', 9, 10000),
(1119, 62, 'Армения', 10, 7000),
(1120, 63, 'Беларусь', 2, 10000),
(1121, 64, 'Кипр', 6, 10000),
(1122, 65, 'Мальдивы', 7,10000),
(1123, 66, 'Франция', 8, 10000),
(1124, 67, 'Англия', 10, 7000),
(1125, 68, 'Бельгия', 10, 7000),
(1126, 71, 'Абхазия', 10, 4000),
(1127, 72, 'Канада', 10, 7000),
(1128, 74, 'Норвегия', 10, 15000),
(1129, 75, 'Филиппины', 10, 10000);


--SQL-запрос, который возвращает список клиентов (ФИО) и суммарную стоимость заказов поездок клиента:
SELECT ФИО_клиента, SUM(Общая_стоимость) as Общая_стоимость_поездок_клиента 
  FROM Клиенты JOIN Поездки_клиента ON Клиенты.ID_клиента = Поездки_клиента.ID_клиента
  GROUP BY ФИО_клиента;

--Отсортировала полученный список по убыванию суммарной стоимости поездок клиента:
SELECT ФИО_клиента, SUM(Общая_стоимость) as Общая_стоимость_поездок_клиента 
  FROM Клиенты JOIN Поездки_клиента ON Клиенты.ID_клиента = Поездки_клиента.ID_клиента
  GROUP BY ФИО_клиента
  ORDER by SUM(Общая_стоимость);

--Добавила столбец со средней суммарной стоимостью поездок
SELECT ФИО_клиента, SUM(Общая_стоимость) as Общая_стоимость_поездок_клиента, AVG(Общая_стоимость) as Средняя_стоимость_поездок_клиента
  FROM Клиенты JOIN Поездки_клиента ON Клиенты.ID_клиента = Поездки_клиента.ID_клиента
  GROUP BY ФИО_клиента
  ORDER by SUM(Общая_стоимость);

--Вывела список клиентов с наибольшей суммарной стоимостью поездок (ФИО, стоимость):
SELECT ФИО_клиента, SUM(Общая_стоимость) as Общая_стоимость_поездок_клиента 
  FROM Клиенты JOIN Поездки_клиента ON Клиенты.ID_клиента = Поездки_клиента.ID_клиента
  GROUP BY ФИО_клиента
  HAVING SUM(Общая_стоимость) = (SELECT MAX(Общая_стоимость_поездок_клиента) 
    FROM (SELECT SUM(Общая_стоимость) AS Общая_стоимость_поездок_клиента FROM Поездки_клиента
      GROUP BY ID_клиента));

--Для каждого клиента с наибольшей суммарной стоимостью поездок вывела список его поездок (номер поездки и общая стоимость) в порядке возрастания стоимости поездки:
SELECT ФИО_клиента, ID_поездки_клиента, Общая_стоимость 
 FROM Клиенты JOIN Поездки_клиента ON Клиенты.ID_клиента = Поездки_клиента.ID_клиента
  WHERE Клиенты.ID_клиента = (SELECT ID_клиента FROM Поездки_клиента GROUP BY ID_клиента
   HAVING SUM(Общая_стоимость) = (SELECT MAX(Общая_стоимость_поездок_клиента) 
    FROM (SELECT SUM(Общая_стоимость) AS Общая_стоимость_поездок_клиента FROM Поездки_клиента GROUP BY ID_клиента)))
 ORDER BY Общая_стоимость DESC;

 --Вывела только тех клиентов, у которых суммарная стоимость поездок превышает среднюю суммарную стоимость поездок клиентов:
 SELECT ФИО_клиента, SUM(Общая_стоимость) as Общая_стоимость_поездок_клиента 
  FROM Клиенты JOIN Поездки_клиента ON Клиенты.ID_клиента = Поездки_клиента.ID_клиента
  GROUP BY ФИО_клиента
  HAVING SUM(Общая_стоимость) > (SELECT avg(Общая_стоимость) FROM Поездки_клиента) ORDER BY Общая_стоимость_поездок_клиента;
